#!/usr/bin/env python3

import os

from .helper import Helper
from .utils  import validate_ip
from .entry  import Entry


class Hstctl(object):
    __entries = Helper.get_entries()

    @staticmethod
    def add_hostnames_by_ips(ips, hostnames):
        for e in [e for e in Hstctl.__entries if e.ip in ips]:
            e.hostnames += [h for h in hostnames if h not in e.hostnames]

        for ip in [i for i in ips if i not in [e.ip for e in Hstctl.__entries]]:
            if validate_ip(ip) and len(hostnames) > 0:
                Hstctl.__entries.append(Entry(ip, hostnames, True, None))

    @staticmethod
    def remove_hostnames_by_ips(ips, hostnames):
        for e in [e for e in Hstctl.__entries if e.ip in ips]:
            e.hostnames = list(set(e.hostnames) - set(hostnames))

            if len(e.hostnames) is 0:
                Hstctl.__entries.remove(e)

    @staticmethod
    def enable_entries_by_ips(ips):
        for e in [e for e in Hstctl.__entries if e.ip in ips]:
            e.status = True

    @staticmethod
    def disable_entries_by_ips(ips):
        for e in [e for e in Hstctl.__entries if e.ip in ips]:
            e.status = False

    @staticmethod
    def purge_entries_by_ips(ips):
        for e in [e for e in Hstctl.__entries if e.ip in ips]:
            Hstctl.__entries.remove(e)

    @staticmethod
    def comment_entries_by_ips(ips, comment):
        for e in [e for e in Hstctl.__entries if e.ip in ips]:
            e.comment = comment

    @staticmethod
    def uncomment_entries_by_ips(ips):
        for e in [e for e in Hstctl.__entries if e.ip in ips]:
            e.comment = None

    @staticmethod
    def list_entries(ips = []):
        max_len = 4

        for e in Hstctl.__entries:
            if (not ips or e.ip in ips) and max_len < len(e.ip):
                max_len = len(e.ip)

        print('\033[1;34;34mStatus   ' + 'IP'.ljust(max_len, ' ') + ' Hostnames\033[0m')

        for e in Hstctl.__entries:
            if not ips or e.ip in ips:
                if e.status:
                    print('\033[1;32;32mEnabled\033[0m  ' + e.ip.ljust(max_len, ' '), e.hostnames)
                else:
                    print('\033[1;31;31mDisabled\033[0m ' + e.ip.ljust(max_len, ' '), e.hostnames)

                if e.comment:
                    print( '\033[1;34;34m  ->\033[0m \033[1;33;33m' + e.comment + '\033[0m \n')

    @staticmethod
    def write():
        if not os.access('/etc/hosts', os.W_OK):
            quit('[\033[1;31;31m-\033[0m] File not writable:\n\t/etc/hosts')

        with open('/etc/hosts', 'w+') as f:
            f.write('##\n# This file was generated by Hstctl.\n##\n\n')

            for e in Hstctl.__entries:
                status_prefix  = '' if e.status else '# '
                comment_prefix = ' # ' + e.comment if e.comment else ''

                f.write(status_prefix + e.ip + ' ' + ' '.join(e.hostnames) + comment_prefix + '\n')

        f.close()
